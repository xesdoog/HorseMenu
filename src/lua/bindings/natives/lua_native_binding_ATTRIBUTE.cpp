#include "lua_native_binding.hpp"
#include "game/rdr/Natives.hpp"

namespace Lua::native
{
	static void LUA_NATIVE_ATTRIBUTE_SET_ATTRIBUTE_BASE_RANK(Ped ped, int attributeIndex, int newValue)
	{
		ATTRIBUTE::SET_ATTRIBUTE_BASE_RANK(ped, attributeIndex, newValue);
	}

	static int LUA_NATIVE_ATTRIBUTE_GET_ATTRIBUTE_RANK(Ped ped, int attributeIndex)
	{
		auto retval = ATTRIBUTE::GET_ATTRIBUTE_RANK(ped, attributeIndex);
		return retval;
	}

	static int LUA_NATIVE_ATTRIBUTE_GET_ATTRIBUTE_BASE_RANK(Ped ped, int attributeIndex)
	{
		auto retval = ATTRIBUTE::GET_ATTRIBUTE_BASE_RANK(ped, attributeIndex);
		return retval;
	}

	static int LUA_NATIVE_ATTRIBUTE_GET_ATTRIBUTE_BONUS_RANK(Ped ped, int coreIndex)
	{
		auto retval = ATTRIBUTE::GET_ATTRIBUTE_BONUS_RANK(ped, coreIndex);
		return retval;
	}

	static int LUA_NATIVE_ATTRIBUTE_GET_MAX_ATTRIBUTE_RANK(Ped ped, int attributeIndex)
	{
		auto retval = ATTRIBUTE::GET_MAX_ATTRIBUTE_RANK(ped, attributeIndex);
		return retval;
	}

	static void LUA_NATIVE_ATTRIBUTE_SET_ATTRIBUTE_BONUS_RANK(Ped ped, int attributeIndex, int newValue)
	{
		ATTRIBUTE::SET_ATTRIBUTE_BONUS_RANK(ped, attributeIndex, newValue);
	}

	static int LUA_NATIVE_ATTRIBUTE_GET_DEFAULT_ATTRIBUTE_RANK(Ped ped, int attributeIndex)
	{
		auto retval = ATTRIBUTE::GET_DEFAULT_ATTRIBUTE_RANK(ped, attributeIndex);
		return retval;
	}

	static int LUA_NATIVE_ATTRIBUTE_GET_DEFAULT_MAX_ATTRIBUTE_RANK(Ped ped, int attributeIndex)
	{
		auto retval = ATTRIBUTE::GET_DEFAULT_MAX_ATTRIBUTE_RANK(ped, attributeIndex);
		return retval;
	}

	static void LUA_NATIVE_ATTRIBUTE_ADD_ATTRIBUTE_POINTS(Ped ped, int attributeIndex, int p2)
	{
		ATTRIBUTE::ADD_ATTRIBUTE_POINTS(ped, attributeIndex, p2);
	}

	static void LUA_NATIVE_ATTRIBUTE_SET_ATTRIBUTE_POINTS(Ped ped, int attributeIndex, int p2)
	{
		ATTRIBUTE::SET_ATTRIBUTE_POINTS(ped, attributeIndex, p2);
	}

	static int LUA_NATIVE_ATTRIBUTE_GET_ATTRIBUTE_POINTS(Ped ped, int attributeIndex)
	{
		auto retval = ATTRIBUTE::GET_ATTRIBUTE_POINTS(ped, attributeIndex);
		return retval;
	}

	static int LUA_NATIVE_ATTRIBUTE_GET_MAX_ATTRIBUTE_POINTS(Ped ped, int attributeIndex)
	{
		auto retval = ATTRIBUTE::GET_MAX_ATTRIBUTE_POINTS(ped, attributeIndex);
		return retval;
	}

	static void LUA_NATIVE_ATTRIBUTE_SET_ATTRIBUTE_CORE_VALUE_(Ped ped, int coreIndex, int value)
	{
		ATTRIBUTE::_SET_ATTRIBUTE_CORE_VALUE(ped, coreIndex, value);
	}

	static int LUA_NATIVE_ATTRIBUTE_GET_ATTRIBUTE_CORE_VALUE_(Ped ped, int coreIndex)
	{
		auto retval = ATTRIBUTE::_GET_ATTRIBUTE_CORE_VALUE(ped, coreIndex);
		return retval;
	}

	static int LUA_NATIVE_ATTRIBUTE_GET_DEFAULT_ATTRIBUTE_POINTS_NEEDED_FOR_RANK(Hash modelHash, int attributeIndex, int rank)
	{
		auto retval = ATTRIBUTE::GET_DEFAULT_ATTRIBUTE_POINTS_NEEDED_FOR_RANK(modelHash, attributeIndex, rank);
		return retval;
	}

	static void LUA_NATIVE_ATTRIBUTE_ENABLE_ATTRIBUTE_OVERPOWER(Ped ped, int attributeIndex, float value, bool makeSound)
	{
		ATTRIBUTE::ENABLE_ATTRIBUTE_OVERPOWER(ped, attributeIndex, value, makeSound);
	}

	static void LUA_NATIVE_ATTRIBUTE_ENABLE_ATTRIBUTE_CORE_OVERPOWER_(Ped ped, int coreIndex, float value, bool makeSound)
	{
		ATTRIBUTE::_ENABLE_ATTRIBUTE_CORE_OVERPOWER(ped, coreIndex, value, makeSound);
	}

	static void LUA_NATIVE_ATTRIBUTE_DISABLE_ATTRIBUTE_OVERPOWER(Ped ped, int attributeIndex)
	{
		ATTRIBUTE::DISABLE_ATTRIBUTE_OVERPOWER(ped, attributeIndex);
	}

	static bool LUA_NATIVE_ATTRIBUTE_IS_ATTRIBUTE_OVERPOWERED_(Ped ped, int attributeIndex)
	{
		auto retval = (bool)ATTRIBUTE::_IS_ATTRIBUTE_OVERPOWERED(ped, attributeIndex);
		return retval;
	}

	static bool LUA_NATIVE_ATTRIBUTE_IS_ATTRIBUTE_CORE_OVERPOWERED_(Ped ped, int coreIndex)
	{
		auto retval = (bool)ATTRIBUTE::_IS_ATTRIBUTE_CORE_OVERPOWERED(ped, coreIndex);
		return retval;
	}

	static float LUA_NATIVE_ATTRIBUTE_GET_ATTRIBUTE_OVERPOWER_SECONDS_LEFT_(Ped ped, int attributeIndex)
	{
		auto retval = ATTRIBUTE::_GET_ATTRIBUTE_OVERPOWER_SECONDS_LEFT(ped, attributeIndex);
		return retval;
	}

	static float LUA_NATIVE_ATTRIBUTE_GET_ATTRIBUTE_CORE_OVERPOWER_SECONDS_LEFT_(Ped ped, int coreIndex)
	{
		auto retval = ATTRIBUTE::_GET_ATTRIBUTE_CORE_OVERPOWER_SECONDS_LEFT(ped, coreIndex);
		return retval;
	}

	static void LUA_NATIVE_ATTRIBUTE_START_ITEM_PREVIEW_(Any p0, int p1)
	{
		ATTRIBUTE::_START_ITEM_PREVIEW(p0, p1);
	}

	static void LUA_NATIVE_ATTRIBUTE_STOP_ITEM_PREVIEW()
	{
		ATTRIBUTE::STOP_ITEM_PREVIEW();
	}

	static void LUA_NATIVE_ATTRIBUTE_SET_STATUS_EFFECT_CORE_ICON_(int statusEffectType)
	{
		ATTRIBUTE::_SET_STATUS_EFFECT_CORE_ICON(statusEffectType);
	}

	static void LUA_NATIVE_ATTRIBUTE_SET_STATUS_EFFECT_PERIODIC_ICON_(int statusEffectType)
	{
		ATTRIBUTE::_SET_STATUS_EFFECT_PERIODIC_ICON(statusEffectType);
	}

	static void LUA_NATIVE_ATTRIBUTE_STOP_STATUS_EFFECT_PERIODIC_ICON_(int statusEffectType)
	{
		ATTRIBUTE::_STOP_STATUS_EFFECT_PERIODIC_ICON(statusEffectType);
	}

	void init_native_binding_ATTRIBUTE(sol::state& L)
	{
		auto ATTRIBUTE = L["ATTRIBUTE"].get_or_create<sol::table>();
		ATTRIBUTE.set_function("SET_ATTRIBUTE_BASE_RANK", LUA_NATIVE_ATTRIBUTE_SET_ATTRIBUTE_BASE_RANK);
		ATTRIBUTE.set_function("GET_ATTRIBUTE_RANK", LUA_NATIVE_ATTRIBUTE_GET_ATTRIBUTE_RANK);
		ATTRIBUTE.set_function("GET_ATTRIBUTE_BASE_RANK", LUA_NATIVE_ATTRIBUTE_GET_ATTRIBUTE_BASE_RANK);
		ATTRIBUTE.set_function("GET_ATTRIBUTE_BONUS_RANK", LUA_NATIVE_ATTRIBUTE_GET_ATTRIBUTE_BONUS_RANK);
		ATTRIBUTE.set_function("GET_MAX_ATTRIBUTE_RANK", LUA_NATIVE_ATTRIBUTE_GET_MAX_ATTRIBUTE_RANK);
		ATTRIBUTE.set_function("SET_ATTRIBUTE_BONUS_RANK", LUA_NATIVE_ATTRIBUTE_SET_ATTRIBUTE_BONUS_RANK);
		ATTRIBUTE.set_function("GET_DEFAULT_ATTRIBUTE_RANK", LUA_NATIVE_ATTRIBUTE_GET_DEFAULT_ATTRIBUTE_RANK);
		ATTRIBUTE.set_function("GET_DEFAULT_MAX_ATTRIBUTE_RANK", LUA_NATIVE_ATTRIBUTE_GET_DEFAULT_MAX_ATTRIBUTE_RANK);
		ATTRIBUTE.set_function("ADD_ATTRIBUTE_POINTS", LUA_NATIVE_ATTRIBUTE_ADD_ATTRIBUTE_POINTS);
		ATTRIBUTE.set_function("SET_ATTRIBUTE_POINTS", LUA_NATIVE_ATTRIBUTE_SET_ATTRIBUTE_POINTS);
		ATTRIBUTE.set_function("GET_ATTRIBUTE_POINTS", LUA_NATIVE_ATTRIBUTE_GET_ATTRIBUTE_POINTS);
		ATTRIBUTE.set_function("GET_MAX_ATTRIBUTE_POINTS", LUA_NATIVE_ATTRIBUTE_GET_MAX_ATTRIBUTE_POINTS);
		ATTRIBUTE.set_function("SET_ATTRIBUTE_CORE_VALUE_", LUA_NATIVE_ATTRIBUTE_SET_ATTRIBUTE_CORE_VALUE_);
		ATTRIBUTE.set_function("GET_ATTRIBUTE_CORE_VALUE_", LUA_NATIVE_ATTRIBUTE_GET_ATTRIBUTE_CORE_VALUE_);
		ATTRIBUTE.set_function("GET_DEFAULT_ATTRIBUTE_POINTS_NEEDED_FOR_RANK", LUA_NATIVE_ATTRIBUTE_GET_DEFAULT_ATTRIBUTE_POINTS_NEEDED_FOR_RANK);
		ATTRIBUTE.set_function("ENABLE_ATTRIBUTE_OVERPOWER", LUA_NATIVE_ATTRIBUTE_ENABLE_ATTRIBUTE_OVERPOWER);
		ATTRIBUTE.set_function("ENABLE_ATTRIBUTE_CORE_OVERPOWER_", LUA_NATIVE_ATTRIBUTE_ENABLE_ATTRIBUTE_CORE_OVERPOWER_);
		ATTRIBUTE.set_function("DISABLE_ATTRIBUTE_OVERPOWER", LUA_NATIVE_ATTRIBUTE_DISABLE_ATTRIBUTE_OVERPOWER);
		ATTRIBUTE.set_function("IS_ATTRIBUTE_OVERPOWERED_", LUA_NATIVE_ATTRIBUTE_IS_ATTRIBUTE_OVERPOWERED_);
		ATTRIBUTE.set_function("IS_ATTRIBUTE_CORE_OVERPOWERED_", LUA_NATIVE_ATTRIBUTE_IS_ATTRIBUTE_CORE_OVERPOWERED_);
		ATTRIBUTE.set_function("GET_ATTRIBUTE_OVERPOWER_SECONDS_LEFT_", LUA_NATIVE_ATTRIBUTE_GET_ATTRIBUTE_OVERPOWER_SECONDS_LEFT_);
		ATTRIBUTE.set_function("GET_ATTRIBUTE_CORE_OVERPOWER_SECONDS_LEFT_", LUA_NATIVE_ATTRIBUTE_GET_ATTRIBUTE_CORE_OVERPOWER_SECONDS_LEFT_);
		ATTRIBUTE.set_function("START_ITEM_PREVIEW_", LUA_NATIVE_ATTRIBUTE_START_ITEM_PREVIEW_);
		ATTRIBUTE.set_function("STOP_ITEM_PREVIEW", LUA_NATIVE_ATTRIBUTE_STOP_ITEM_PREVIEW);
		ATTRIBUTE.set_function("SET_STATUS_EFFECT_CORE_ICON_", LUA_NATIVE_ATTRIBUTE_SET_STATUS_EFFECT_CORE_ICON_);
		ATTRIBUTE.set_function("SET_STATUS_EFFECT_PERIODIC_ICON_", LUA_NATIVE_ATTRIBUTE_SET_STATUS_EFFECT_PERIODIC_ICON_);
		ATTRIBUTE.set_function("STOP_STATUS_EFFECT_PERIODIC_ICON_", LUA_NATIVE_ATTRIBUTE_STOP_STATUS_EFFECT_PERIODIC_ICON_);
	}
}
