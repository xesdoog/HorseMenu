#include "lua_native_binding.hpp"
#include "game/rdr/Natives.hpp"

namespace Lua::native
{
	static bool LUA_NATIVE_MISSIONDATA_MISSIONDATA_IS_VALID(Any p0)
	{
		auto retval = (bool)MISSIONDATA::MISSIONDATA_IS_VALID(p0);
		return retval;
	}

	static Hash LUA_NATIVE_MISSIONDATA_MISSIONDATA_GET_CATAGORY(Hash missionId)
	{
		auto retval = MISSIONDATA::MISSIONDATA_GET_CATAGORY(missionId);
		return retval;
	}

	static Hash LUA_NATIVE_MISSIONDATA_MISSIONDATA_GET_TEXTURE_NAME(Hash missionId)
	{
		auto retval = MISSIONDATA::MISSIONDATA_GET_TEXTURE_NAME(missionId);
		return retval;
	}

	static Hash LUA_NATIVE_MISSIONDATA_MISSIONDATA_GET_TEXTURE_TXD(Hash missionId)
	{
		auto retval = MISSIONDATA::MISSIONDATA_GET_TEXTURE_TXD(missionId);
		return retval;
	}

	static bool LUA_NATIVE_MISSIONDATA_MISSIONDATA_WAS_COMPLETED(Hash missionId)
	{
		auto retval = (bool)MISSIONDATA::MISSIONDATA_WAS_COMPLETED(missionId);
		return retval;
	}

	static int LUA_NATIVE_MISSIONDATA_MISSIONDATA_GET_RATING(Hash missionId)
	{
		auto retval = MISSIONDATA::MISSIONDATA_GET_RATING(missionId);
		return retval;
	}

	static void LUA_NATIVE_MISSIONDATA_MISSIONDATA_SET_MISSION_RATING_(Hash missionId, int rating)
	{
		MISSIONDATA::_MISSIONDATA_SET_MISSION_RATING(missionId, rating);
	}

	static bool LUA_NATIVE_MISSIONDATA_MISSIONDATA_IS_REQUIRED_STORY_MISSION(Hash missionId)
	{
		auto retval = (bool)MISSIONDATA::MISSIONDATA_IS_REQUIRED_STORY_MISSION(missionId);
		return retval;
	}

	static void LUA_NATIVE_MISSIONDATA_MISSIONDATA_SET_REPLAY_STATE_LOCKED_(Hash missionId, int replayState)
	{
		MISSIONDATA::_MISSIONDATA_SET_REPLAY_STATE_LOCKED(missionId, replayState);
	}

	static int LUA_NATIVE_MISSIONDATA_MISSIONDATA_GET_REPLAY_STATE(Any p0)
	{
		auto retval = MISSIONDATA::MISSIONDATA_GET_REPLAY_STATE(p0);
		return retval;
	}

	static void LUA_NATIVE_MISSIONDATA_MISSIONDATA_SET_RATING_SCORES(Hash missionId, int bronzeScore, int silverScore, int goldScore)
	{
		MISSIONDATA::MISSIONDATA_SET_RATING_SCORES(missionId, bronzeScore, silverScore, goldScore);
	}

	static void LUA_NATIVE_MISSIONDATA_MISSIONDATA_SET_HIGH_SCORE(Hash missionId, int score)
	{
		MISSIONDATA::MISSIONDATA_SET_HIGH_SCORE(missionId, score);
	}

	static int LUA_NATIVE_MISSIONDATA_MISSIONDATA_GET_HIGH_SCORE(Hash missionId)
	{
		auto retval = MISSIONDATA::MISSIONDATA_GET_HIGH_SCORE(missionId);
		return retval;
	}

	static bool LUA_NATIVE_MISSIONDATA_MISSIONDATA_IS_REPLAY_CATEGORY_LOCKED_(Hash category)
	{
		auto retval = (bool)MISSIONDATA::_MISSIONDATA_IS_REPLAY_CATEGORY_LOCKED(category);
		return retval;
	}

	static void LUA_NATIVE_MISSIONDATA_MISSIONDATA_SET_REPLAY_LOCKED_FOR_CATEGORY(Hash category, bool locked)
	{
		MISSIONDATA::MISSIONDATA_SET_REPLAY_LOCKED_FOR_CATEGORY(category, locked);
	}

	static void LUA_NATIVE_MISSIONDATA_MISSIONDATA_TIMECYCLE_BOX_SET_MODIFIER_(sol::stack_object timecycleName)
	{
		MISSIONDATA::_MISSIONDATA_TIMECYCLE_BOX_SET_MODIFIER(timecycleName.is<const char*>() ? timecycleName.as<const char*>() : nullptr);
	}

	static void LUA_NATIVE_MISSIONDATA_MISSIONDATA_TIMECYCLE_BOX_DELETE_()
	{
		MISSIONDATA::_MISSIONDATA_TIMECYCLE_BOX_DELETE();
	}

	static bool LUA_NATIVE_MISSIONDATA_MISSIONDATA_TIMECYCLE_BOX_EXISTS_()
	{
		auto retval = (bool)MISSIONDATA::_MISSIONDATA_TIMECYCLE_BOX_EXISTS();
		return retval;
	}

	void init_native_binding_MISSIONDATA(sol::state& L)
	{
		auto MISSIONDATA = L["MISSIONDATA"].get_or_create<sol::table>();
		MISSIONDATA.set_function("MISSIONDATA_IS_VALID", LUA_NATIVE_MISSIONDATA_MISSIONDATA_IS_VALID);
		MISSIONDATA.set_function("MISSIONDATA_GET_CATAGORY", LUA_NATIVE_MISSIONDATA_MISSIONDATA_GET_CATAGORY);
		MISSIONDATA.set_function("MISSIONDATA_GET_TEXTURE_NAME", LUA_NATIVE_MISSIONDATA_MISSIONDATA_GET_TEXTURE_NAME);
		MISSIONDATA.set_function("MISSIONDATA_GET_TEXTURE_TXD", LUA_NATIVE_MISSIONDATA_MISSIONDATA_GET_TEXTURE_TXD);
		MISSIONDATA.set_function("MISSIONDATA_WAS_COMPLETED", LUA_NATIVE_MISSIONDATA_MISSIONDATA_WAS_COMPLETED);
		MISSIONDATA.set_function("MISSIONDATA_GET_RATING", LUA_NATIVE_MISSIONDATA_MISSIONDATA_GET_RATING);
		MISSIONDATA.set_function("MISSIONDATA_SET_MISSION_RATING_", LUA_NATIVE_MISSIONDATA_MISSIONDATA_SET_MISSION_RATING_);
		MISSIONDATA.set_function("MISSIONDATA_IS_REQUIRED_STORY_MISSION", LUA_NATIVE_MISSIONDATA_MISSIONDATA_IS_REQUIRED_STORY_MISSION);
		MISSIONDATA.set_function("MISSIONDATA_SET_REPLAY_STATE_LOCKED_", LUA_NATIVE_MISSIONDATA_MISSIONDATA_SET_REPLAY_STATE_LOCKED_);
		MISSIONDATA.set_function("MISSIONDATA_GET_REPLAY_STATE", LUA_NATIVE_MISSIONDATA_MISSIONDATA_GET_REPLAY_STATE);
		MISSIONDATA.set_function("MISSIONDATA_SET_RATING_SCORES", LUA_NATIVE_MISSIONDATA_MISSIONDATA_SET_RATING_SCORES);
		MISSIONDATA.set_function("MISSIONDATA_SET_HIGH_SCORE", LUA_NATIVE_MISSIONDATA_MISSIONDATA_SET_HIGH_SCORE);
		MISSIONDATA.set_function("MISSIONDATA_GET_HIGH_SCORE", LUA_NATIVE_MISSIONDATA_MISSIONDATA_GET_HIGH_SCORE);
		MISSIONDATA.set_function("MISSIONDATA_IS_REPLAY_CATEGORY_LOCKED_", LUA_NATIVE_MISSIONDATA_MISSIONDATA_IS_REPLAY_CATEGORY_LOCKED_);
		MISSIONDATA.set_function("MISSIONDATA_SET_REPLAY_LOCKED_FOR_CATEGORY", LUA_NATIVE_MISSIONDATA_MISSIONDATA_SET_REPLAY_LOCKED_FOR_CATEGORY);
		MISSIONDATA.set_function("MISSIONDATA_TIMECYCLE_BOX_SET_MODIFIER_", LUA_NATIVE_MISSIONDATA_MISSIONDATA_TIMECYCLE_BOX_SET_MODIFIER_);
		MISSIONDATA.set_function("MISSIONDATA_TIMECYCLE_BOX_DELETE_", LUA_NATIVE_MISSIONDATA_MISSIONDATA_TIMECYCLE_BOX_DELETE_);
		MISSIONDATA.set_function("MISSIONDATA_TIMECYCLE_BOX_EXISTS_", LUA_NATIVE_MISSIONDATA_MISSIONDATA_TIMECYCLE_BOX_EXISTS_);
	}
}
