#include "lua_native_binding.hpp"
#include "game/rdr/Natives.hpp"

namespace Lua::native
{
	static float LUA_NATIVE_COMPENDIUM_0x725D52F21A5E9E22_(Hash category)
	{
		auto retval = COMPENDIUM::_0x725D52F21A5E9E22(category);
		return retval;
	}

	static int LUA_NATIVE_COMPENDIUM_COMPENDIUM_GET_NUM_OF_ENTRIES_IN_CATEGORY_(Hash category)
	{
		auto retval = COMPENDIUM::_COMPENDIUM_GET_NUM_OF_ENTRIES_IN_CATEGORY(category);
		return retval;
	}

	static int LUA_NATIVE_COMPENDIUM_0x729D52461AEA9E22_(Hash category)
	{
		auto retval = COMPENDIUM::_0x729D52461AEA9E22(category);
		return retval;
	}

	static Hash LUA_NATIVE_COMPENDIUM_COMPENDIUM_GET_SHORT_DESCRIPTION_FROM_PED(Ped ped)
	{
		auto retval = COMPENDIUM::COMPENDIUM_GET_SHORT_DESCRIPTION_FROM_PED(ped);
		return retval;
	}

	static Hash LUA_NATIVE_COMPENDIUM_COMPENDIUM_GET_SUBCATEGORY_PED_IS_IN(Hash category, Ped ped)
	{
		auto retval = COMPENDIUM::COMPENDIUM_GET_SUBCATEGORY_PED_IS_IN(category, ped);
		return retval;
	}

	static Hash LUA_NATIVE_COMPENDIUM_COMPENDIUM_GET_SUBCATEGORY_HASH_FROM_ANIMAL_TYPE_(Hash category, Hash animalType)
	{
		auto retval = COMPENDIUM::_COMPENDIUM_GET_SUBCATEGORY_HASH_FROM_ANIMAL_TYPE(category, animalType);
		return retval;
	}

	static int LUA_NATIVE_COMPENDIUM_COMPENDIUM_GET_NUM_ENTRIES_IN_SUBCATEGORY(Hash category, Hash subcategory)
	{
		auto retval = COMPENDIUM::COMPENDIUM_GET_NUM_ENTRIES_IN_SUBCATEGORY(category, subcategory);
		return retval;
	}

	static int LUA_NATIVE_COMPENDIUM_COMPENDIUM_GET_ENTRY_BY_INDEX_IN_SUBCATEGORY(Hash category, Hash subcategory, int count)
	{
		auto retval = COMPENDIUM::COMPENDIUM_GET_ENTRY_BY_INDEX_IN_SUBCATEGORY(category, subcategory, count);
		return retval;
	}

	static int LUA_NATIVE_COMPENDIUM_COMPENDIUM_GET_ENTRY_BY_PED_INDEX(Hash category, Ped ped)
	{
		auto retval = COMPENDIUM::COMPENDIUM_GET_ENTRY_BY_PED_INDEX(category, ped);
		return retval;
	}

	static int LUA_NATIVE_COMPENDIUM_COMPENDIUM_GET_ENTRY_BY_STAT_ITEM(Hash category, Hash animalType)
	{
		auto retval = COMPENDIUM::COMPENDIUM_GET_ENTRY_BY_STAT_ITEM(category, animalType);
		return retval;
	}

	static Any LUA_NATIVE_COMPENDIUM_COMPENDIUM_GET_SUBCATEGORY_TOAST_APP_ID(Hash category, Hash subcategory)
	{
		auto retval = COMPENDIUM::COMPENDIUM_GET_SUBCATEGORY_TOAST_APP_ID(category, subcategory);
		return retval;
	}

	static Hash LUA_NATIVE_COMPENDIUM_COMPENDIUM_GET_MAP_DISCOVERABLE_FROM_STAT_ITEM(Hash animalStatItem, float x, float y, float z)
	{
		auto retval = COMPENDIUM::COMPENDIUM_GET_MAP_DISCOVERABLE_FROM_STAT_ITEM(animalStatItem, x, y, z);
		return retval;
	}

	static void LUA_NATIVE_COMPENDIUM_COMPENDIUM_ANIMAL_OBSERVED_BY_STAT_NAME(Hash animalType, bool disableCompendiumToast)
	{
		COMPENDIUM::COMPENDIUM_ANIMAL_OBSERVED_BY_STAT_NAME(animalType, disableCompendiumToast);
	}

	static bool LUA_NATIVE_COMPENDIUM_COMPENDIUM_WAS_ANIMAL_OBSERVED(Ped ped)
	{
		auto retval = (bool)COMPENDIUM::COMPENDIUM_WAS_ANIMAL_OBSERVED(ped);
		return retval;
	}

	static void LUA_NATIVE_COMPENDIUM_COMPENDIUM_ANIMAL_SET_DISCOVERED(int compendiumEntry)
	{
		COMPENDIUM::COMPENDIUM_ANIMAL_SET_DISCOVERED(compendiumEntry);
	}

	static Any LUA_NATIVE_COMPENDIUM_COMPENDIUM_GET_STUDY_AWARD_ID(Ped ped)
	{
		auto retval = COMPENDIUM::COMPENDIUM_GET_STUDY_AWARD_ID(ped);
		return retval;
	}

	static Any LUA_NATIVE_COMPENDIUM_COMPENDIUM_ANIMAL_GET_SAMPLE_INVENTORY_ITEM(int compendiumEntry)
	{
		auto retval = COMPENDIUM::COMPENDIUM_ANIMAL_GET_SAMPLE_INVENTORY_ITEM(compendiumEntry);
		return retval;
	}

	static bool LUA_NATIVE_COMPENDIUM_COMPENDIUM_ANIMAL_HAS_SAMPLE(int compendiumEntry)
	{
		auto retval = (bool)COMPENDIUM::COMPENDIUM_ANIMAL_HAS_SAMPLE(compendiumEntry);
		return retval;
	}

	static bool LUA_NATIVE_COMPENDIUM_COMPENDIUM_ANIMAL_HAS_STAMP(int compendiumEntry)
	{
		auto retval = (bool)COMPENDIUM::COMPENDIUM_ANIMAL_HAS_STAMP(compendiumEntry);
		return retval;
	}

	static const char* LUA_NATIVE_COMPENDIUM_COMPENDIUM_GET_SUBCATEGORY_SAMPLE_TOAST_TITLE(Hash category, Hash subcategory)
	{
		auto retval = COMPENDIUM::COMPENDIUM_GET_SUBCATEGORY_SAMPLE_TOAST_TITLE(category, subcategory);
		return retval;
	}

	static const char* LUA_NATIVE_COMPENDIUM_COMPENDIUM_GET_SUBCATEGORY_SAMPLE_TOAST_DESC_PROGRESS(Hash category, Hash subcategory)
	{
		auto retval = COMPENDIUM::COMPENDIUM_GET_SUBCATEGORY_SAMPLE_TOAST_DESC_PROGRESS(category, subcategory);
		return retval;
	}

	static const char* LUA_NATIVE_COMPENDIUM_COMPENDIUM_GET_SUBCATEGORY_SAMPLE_TOAST_DESC_COMPLETE(Hash category, Hash subcategory)
	{
		auto retval = COMPENDIUM::COMPENDIUM_GET_SUBCATEGORY_SAMPLE_TOAST_DESC_COMPLETE(category, subcategory);
		return retval;
	}

	static void LUA_NATIVE_COMPENDIUM_COMPENDIUM_FISH_CAUGHT(Ped ped, Hash category)
	{
		COMPENDIUM::COMPENDIUM_FISH_CAUGHT(ped, category);
	}

	static int LUA_NATIVE_COMPENDIUM_COMPENDIUM_FISH_GET_LURE_SUITABILITY_BY_STAT_ITEM(Hash animalType, Hash baitType)
	{
		auto retval = COMPENDIUM::COMPENDIUM_FISH_GET_LURE_SUITABILITY_BY_STAT_ITEM(animalType, baitType);
		return retval;
	}

	static void LUA_NATIVE_COMPENDIUM_COMPENDIUM_GANG_CAMP_FOUND(Any p0, Any p1)
	{
		COMPENDIUM::COMPENDIUM_GANG_CAMP_FOUND(p0, p1);
	}

	static void LUA_NATIVE_COMPENDIUM_COMPENDIUM_GANG_AMBUSH_SURVIVED(Any p0)
	{
		COMPENDIUM::COMPENDIUM_GANG_AMBUSH_SURVIVED(p0);
	}

	static void LUA_NATIVE_COMPENDIUM_COMPENDIUM_GANG_ENCOUNTERED(Any p0)
	{
		COMPENDIUM::COMPENDIUM_GANG_ENCOUNTERED(p0);
	}

	static void LUA_NATIVE_COMPENDIUM_COMPENDIUM_GANG_BOUNTY_CAPTURED(Any p0)
	{
		COMPENDIUM::COMPENDIUM_GANG_BOUNTY_CAPTURED(p0);
	}

	static void LUA_NATIVE_COMPENDIUM_COMPENDIUM_GANG_MEMBER_KILLED(Any p0)
	{
		COMPENDIUM::COMPENDIUM_GANG_MEMBER_KILLED(p0);
	}

	static void LUA_NATIVE_COMPENDIUM_COMPENDIUM_GANG_HIDEOUT_FOUND(Any p0, Any p1)
	{
		COMPENDIUM::COMPENDIUM_GANG_HIDEOUT_FOUND(p0, p1);
	}

	static void LUA_NATIVE_COMPENDIUM_COMPENDIUM_HERB_PICKED(Hash herbType, float x, float y, float z)
	{
		COMPENDIUM::COMPENDIUM_HERB_PICKED(herbType, x, y, z);
	}

	static void LUA_NATIVE_COMPENDIUM_COMPENDIUM_HORSE_BONDING(Ped ped, int bondingLevel)
	{
		COMPENDIUM::COMPENDIUM_HORSE_BONDING(ped, bondingLevel);
	}

	static void LUA_NATIVE_COMPENDIUM_COMPENDIUM_HORSE_WILD_BROKEN(Ped ped)
	{
		COMPENDIUM::COMPENDIUM_HORSE_WILD_BROKEN(ped);
	}

	static void LUA_NATIVE_COMPENDIUM_COMPENDIUM_HORSE_OBSERVED(Ped ped, bool disableCompendiumToast)
	{
		COMPENDIUM::COMPENDIUM_HORSE_OBSERVED(ped, disableCompendiumToast);
	}

	void init_native_binding_COMPENDIUM(sol::state& L)
	{
		auto COMPENDIUM = L["COMPENDIUM"].get_or_create<sol::table>();
		COMPENDIUM.set_function("0x725D52F21A5E9E22_", LUA_NATIVE_COMPENDIUM_0x725D52F21A5E9E22_);
		COMPENDIUM.set_function("COMPENDIUM_GET_NUM_OF_ENTRIES_IN_CATEGORY_", LUA_NATIVE_COMPENDIUM_COMPENDIUM_GET_NUM_OF_ENTRIES_IN_CATEGORY_);
		COMPENDIUM.set_function("0x729D52461AEA9E22_", LUA_NATIVE_COMPENDIUM_0x729D52461AEA9E22_);
		COMPENDIUM.set_function("COMPENDIUM_GET_SHORT_DESCRIPTION_FROM_PED", LUA_NATIVE_COMPENDIUM_COMPENDIUM_GET_SHORT_DESCRIPTION_FROM_PED);
		COMPENDIUM.set_function("COMPENDIUM_GET_SUBCATEGORY_PED_IS_IN", LUA_NATIVE_COMPENDIUM_COMPENDIUM_GET_SUBCATEGORY_PED_IS_IN);
		COMPENDIUM.set_function("COMPENDIUM_GET_SUBCATEGORY_HASH_FROM_ANIMAL_TYPE_", LUA_NATIVE_COMPENDIUM_COMPENDIUM_GET_SUBCATEGORY_HASH_FROM_ANIMAL_TYPE_);
		COMPENDIUM.set_function("COMPENDIUM_GET_NUM_ENTRIES_IN_SUBCATEGORY", LUA_NATIVE_COMPENDIUM_COMPENDIUM_GET_NUM_ENTRIES_IN_SUBCATEGORY);
		COMPENDIUM.set_function("COMPENDIUM_GET_ENTRY_BY_INDEX_IN_SUBCATEGORY", LUA_NATIVE_COMPENDIUM_COMPENDIUM_GET_ENTRY_BY_INDEX_IN_SUBCATEGORY);
		COMPENDIUM.set_function("COMPENDIUM_GET_ENTRY_BY_PED_INDEX", LUA_NATIVE_COMPENDIUM_COMPENDIUM_GET_ENTRY_BY_PED_INDEX);
		COMPENDIUM.set_function("COMPENDIUM_GET_ENTRY_BY_STAT_ITEM", LUA_NATIVE_COMPENDIUM_COMPENDIUM_GET_ENTRY_BY_STAT_ITEM);
		COMPENDIUM.set_function("COMPENDIUM_GET_SUBCATEGORY_TOAST_APP_ID", LUA_NATIVE_COMPENDIUM_COMPENDIUM_GET_SUBCATEGORY_TOAST_APP_ID);
		COMPENDIUM.set_function("COMPENDIUM_GET_MAP_DISCOVERABLE_FROM_STAT_ITEM", LUA_NATIVE_COMPENDIUM_COMPENDIUM_GET_MAP_DISCOVERABLE_FROM_STAT_ITEM);
		COMPENDIUM.set_function("COMPENDIUM_ANIMAL_OBSERVED_BY_STAT_NAME", LUA_NATIVE_COMPENDIUM_COMPENDIUM_ANIMAL_OBSERVED_BY_STAT_NAME);
		COMPENDIUM.set_function("COMPENDIUM_WAS_ANIMAL_OBSERVED", LUA_NATIVE_COMPENDIUM_COMPENDIUM_WAS_ANIMAL_OBSERVED);
		COMPENDIUM.set_function("COMPENDIUM_ANIMAL_SET_DISCOVERED", LUA_NATIVE_COMPENDIUM_COMPENDIUM_ANIMAL_SET_DISCOVERED);
		COMPENDIUM.set_function("COMPENDIUM_GET_STUDY_AWARD_ID", LUA_NATIVE_COMPENDIUM_COMPENDIUM_GET_STUDY_AWARD_ID);
		COMPENDIUM.set_function("COMPENDIUM_ANIMAL_GET_SAMPLE_INVENTORY_ITEM", LUA_NATIVE_COMPENDIUM_COMPENDIUM_ANIMAL_GET_SAMPLE_INVENTORY_ITEM);
		COMPENDIUM.set_function("COMPENDIUM_ANIMAL_HAS_SAMPLE", LUA_NATIVE_COMPENDIUM_COMPENDIUM_ANIMAL_HAS_SAMPLE);
		COMPENDIUM.set_function("COMPENDIUM_ANIMAL_HAS_STAMP", LUA_NATIVE_COMPENDIUM_COMPENDIUM_ANIMAL_HAS_STAMP);
		COMPENDIUM.set_function("COMPENDIUM_GET_SUBCATEGORY_SAMPLE_TOAST_TITLE", LUA_NATIVE_COMPENDIUM_COMPENDIUM_GET_SUBCATEGORY_SAMPLE_TOAST_TITLE);
		COMPENDIUM.set_function("COMPENDIUM_GET_SUBCATEGORY_SAMPLE_TOAST_DESC_PROGRESS", LUA_NATIVE_COMPENDIUM_COMPENDIUM_GET_SUBCATEGORY_SAMPLE_TOAST_DESC_PROGRESS);
		COMPENDIUM.set_function("COMPENDIUM_GET_SUBCATEGORY_SAMPLE_TOAST_DESC_COMPLETE", LUA_NATIVE_COMPENDIUM_COMPENDIUM_GET_SUBCATEGORY_SAMPLE_TOAST_DESC_COMPLETE);
		COMPENDIUM.set_function("COMPENDIUM_FISH_CAUGHT", LUA_NATIVE_COMPENDIUM_COMPENDIUM_FISH_CAUGHT);
		COMPENDIUM.set_function("COMPENDIUM_FISH_GET_LURE_SUITABILITY_BY_STAT_ITEM", LUA_NATIVE_COMPENDIUM_COMPENDIUM_FISH_GET_LURE_SUITABILITY_BY_STAT_ITEM);
		COMPENDIUM.set_function("COMPENDIUM_GANG_CAMP_FOUND", LUA_NATIVE_COMPENDIUM_COMPENDIUM_GANG_CAMP_FOUND);
		COMPENDIUM.set_function("COMPENDIUM_GANG_AMBUSH_SURVIVED", LUA_NATIVE_COMPENDIUM_COMPENDIUM_GANG_AMBUSH_SURVIVED);
		COMPENDIUM.set_function("COMPENDIUM_GANG_ENCOUNTERED", LUA_NATIVE_COMPENDIUM_COMPENDIUM_GANG_ENCOUNTERED);
		COMPENDIUM.set_function("COMPENDIUM_GANG_BOUNTY_CAPTURED", LUA_NATIVE_COMPENDIUM_COMPENDIUM_GANG_BOUNTY_CAPTURED);
		COMPENDIUM.set_function("COMPENDIUM_GANG_MEMBER_KILLED", LUA_NATIVE_COMPENDIUM_COMPENDIUM_GANG_MEMBER_KILLED);
		COMPENDIUM.set_function("COMPENDIUM_GANG_HIDEOUT_FOUND", LUA_NATIVE_COMPENDIUM_COMPENDIUM_GANG_HIDEOUT_FOUND);
		COMPENDIUM.set_function("COMPENDIUM_HERB_PICKED", LUA_NATIVE_COMPENDIUM_COMPENDIUM_HERB_PICKED);
		COMPENDIUM.set_function("COMPENDIUM_HORSE_BONDING", LUA_NATIVE_COMPENDIUM_COMPENDIUM_HORSE_BONDING);
		COMPENDIUM.set_function("COMPENDIUM_HORSE_WILD_BROKEN", LUA_NATIVE_COMPENDIUM_COMPENDIUM_HORSE_WILD_BROKEN);
		COMPENDIUM.set_function("COMPENDIUM_HORSE_OBSERVED", LUA_NATIVE_COMPENDIUM_COMPENDIUM_HORSE_OBSERVED);
	}
}
