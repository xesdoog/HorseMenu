#include "lua_native_binding.hpp"
#include "game/rdr/Natives.hpp"

namespace Lua::native
{
	static Any LUA_NATIVE_UISTATEMACHINE_UIFLOWBLOCK_REQUEST_(Any p0)
	{
		auto retval = UISTATEMACHINE::_UIFLOWBLOCK_REQUEST(p0);
		return retval;
	}

	static void LUA_NATIVE_UISTATEMACHINE_UIFLOWBLOCK_RELEASE_(Any p0)
	{
		UISTATEMACHINE::_UIFLOWBLOCK_RELEASE(p0);
	}

	static Any LUA_NATIVE_UISTATEMACHINE_UIFLOWBLOCK_IS_LOADED_(Any p0)
	{
		auto retval = UISTATEMACHINE::_UIFLOWBLOCK_IS_LOADED(p0);
		return retval;
	}

	static Any LUA_NATIVE_UISTATEMACHINE_UIFLOWBLOCK_ENTER_(Any p0, Any p1)
	{
		auto retval = UISTATEMACHINE::_UIFLOWBLOCK_ENTER(p0, p1);
		return retval;
	}

	static Any LUA_NATIVE_UISTATEMACHINE_UI_STATE_MACHINE_EXISTS(Any p0)
	{
		auto retval = UISTATEMACHINE::UI_STATE_MACHINE_EXISTS(p0);
		return retval;
	}

	static Any LUA_NATIVE_UISTATEMACHINE_UI_STATE_MACHINE_CREATE(Any p0, Any p1)
	{
		auto retval = UISTATEMACHINE::UI_STATE_MACHINE_CREATE(p0, p1);
		return retval;
	}

	static Any LUA_NATIVE_UISTATEMACHINE_UI_STATE_MACHINE_CAN_REQUEST_TRANSITION(Any p0)
	{
		auto retval = UISTATEMACHINE::UI_STATE_MACHINE_CAN_REQUEST_TRANSITION(p0);
		return retval;
	}

	static Any LUA_NATIVE_UISTATEMACHINE_UI_STATE_MACHINE_REQUEST_TRANSITION(Any p0, Any p1)
	{
		auto retval = UISTATEMACHINE::UI_STATE_MACHINE_REQUEST_TRANSITION(p0, p1);
		return retval;
	}

	static void LUA_NATIVE_UISTATEMACHINE_UI_STATE_MACHINE_REQUEST_EXIT(Any p0, Any p1)
	{
		UISTATEMACHINE::UI_STATE_MACHINE_REQUEST_EXIT(p0, p1);
	}

	static bool LUA_NATIVE_UISTATEMACHINE_UI_STATE_MACHINE_IS_EXITED_(Hash p0)
	{
		auto retval = (bool)UISTATEMACHINE::_UI_STATE_MACHINE_IS_EXITED(p0);
		return retval;
	}

	static void LUA_NATIVE_UISTATEMACHINE_UI_STATE_MACHINE_DESTROY(Any p0)
	{
		UISTATEMACHINE::UI_STATE_MACHINE_DESTROY(p0);
	}

	static void LUA_NATIVE_UISTATEMACHINE_UI_STATE_MACHINE_DESTROY_AND_CLEAR(uintptr_t p0)
	{
		UISTATEMACHINE::UI_STATE_MACHINE_DESTROY_AND_CLEAR((Any*)p0);
	}

	void init_native_binding_UISTATEMACHINE(sol::state& L)
	{
		auto UISTATEMACHINE = L["UISTATEMACHINE"].get_or_create<sol::table>();
		UISTATEMACHINE.set_function("UIFLOWBLOCK_REQUEST_", LUA_NATIVE_UISTATEMACHINE_UIFLOWBLOCK_REQUEST_);
		UISTATEMACHINE.set_function("UIFLOWBLOCK_RELEASE_", LUA_NATIVE_UISTATEMACHINE_UIFLOWBLOCK_RELEASE_);
		UISTATEMACHINE.set_function("UIFLOWBLOCK_IS_LOADED_", LUA_NATIVE_UISTATEMACHINE_UIFLOWBLOCK_IS_LOADED_);
		UISTATEMACHINE.set_function("UIFLOWBLOCK_ENTER_", LUA_NATIVE_UISTATEMACHINE_UIFLOWBLOCK_ENTER_);
		UISTATEMACHINE.set_function("UI_STATE_MACHINE_EXISTS", LUA_NATIVE_UISTATEMACHINE_UI_STATE_MACHINE_EXISTS);
		UISTATEMACHINE.set_function("UI_STATE_MACHINE_CREATE", LUA_NATIVE_UISTATEMACHINE_UI_STATE_MACHINE_CREATE);
		UISTATEMACHINE.set_function("UI_STATE_MACHINE_CAN_REQUEST_TRANSITION", LUA_NATIVE_UISTATEMACHINE_UI_STATE_MACHINE_CAN_REQUEST_TRANSITION);
		UISTATEMACHINE.set_function("UI_STATE_MACHINE_REQUEST_TRANSITION", LUA_NATIVE_UISTATEMACHINE_UI_STATE_MACHINE_REQUEST_TRANSITION);
		UISTATEMACHINE.set_function("UI_STATE_MACHINE_REQUEST_EXIT", LUA_NATIVE_UISTATEMACHINE_UI_STATE_MACHINE_REQUEST_EXIT);
		UISTATEMACHINE.set_function("UI_STATE_MACHINE_IS_EXITED_", LUA_NATIVE_UISTATEMACHINE_UI_STATE_MACHINE_IS_EXITED_);
		UISTATEMACHINE.set_function("UI_STATE_MACHINE_DESTROY", LUA_NATIVE_UISTATEMACHINE_UI_STATE_MACHINE_DESTROY);
		UISTATEMACHINE.set_function("UI_STATE_MACHINE_DESTROY_AND_CLEAR", LUA_NATIVE_UISTATEMACHINE_UI_STATE_MACHINE_DESTROY_AND_CLEAR);
	}
}
